name: WindowLocker CI/CD

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.set_version.outputs.version }}
      is_release: ${{ steps.set_version.outputs.is_release }}
      artifact_name: ${{ steps.set_artifact_name.outputs.artifact_name }}
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v3
      
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.3
      
    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1.2.0

    - name: NuGet 패키지 복원
      run: nuget restore WindowLocker.sln
      
    - name: 빌드 버전 설정
      id: set_version
      run: |
        if ("${{ github.ref_type }}" -eq "tag") {
          $VERSION = "${{ github.ref_name }}".TrimStart("v")
          echo "version=$VERSION" >> $env:GITHUB_OUTPUT
          echo "is_release=true" >> $env:GITHUB_OUTPUT
        } else {
          $TODAY = Get-Date -Format "yyyy.MM.dd"
          $SHORT_SHA = "${{ github.sha }}".Substring(0, 7)
          $VERSION = "$TODAY-$SHORT_SHA"
          echo "version=$VERSION" >> $env:GITHUB_OUTPUT
          echo "is_release=false" >> $env:GITHUB_OUTPUT
        }
      shell: pwsh
      
    - name: 아티팩트 이름 설정
      id: set_artifact_name
      run: |
        if ("${{ github.event_name }}" -eq "workflow_dispatch" -or "${{ startsWith(github.ref, 'refs/tags/') }}" -eq "True") {
          echo "artifact_name=WindowLocker-${{ steps.set_version.outputs.version }}-Release" >> $env:GITHUB_OUTPUT
        } else {
          echo "artifact_name=WindowLocker-Debug-${{ github.run_number }}" >> $env:GITHUB_OUTPUT
        }
      shell: pwsh
      
    - name: Debug 빌드
      if: github.event_name == 'pull_request' || github.event_name == 'push' && startsWith(github.ref, 'refs/heads/')
      run: msbuild WindowLocker.sln /p:Configuration=Debug /p:Platform="Any CPU" /p:DebugSymbols=true /p:DebugType=full
      
    - name: Release 빌드
      if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')
      run: msbuild WindowLocker.sln /p:Configuration=Release /p:Platform="Any CPU"
      
    - name: 빌드 결과물 확인
      run: |
        echo "빌드 결과물 디렉터리 확인 중..."
        echo "작업 공간 경로: $(Get-Location)"
        
        if (Test-Path -Path "bin") {
          echo "bin 디렉터리 존재, 내용 출력:"
          Get-ChildItem -Path "bin" -Recurse | Select-Object FullName
          
          if (Test-Path -Path "bin\Debug") {
            echo "Debug 폴더 내용:"
            Get-ChildItem -Path "bin\Debug" -Recurse | Select-Object Name, Length, LastWriteTime
          }
          
          if (Test-Path -Path "bin\Release") {
            echo "Release 폴더 내용:"
            Get-ChildItem -Path "bin\Release" -Recurse | Select-Object Name, Length, LastWriteTime
          }
        } else {
          echo "bin 디렉터리가 없습니다."
          echo "현재 디렉터리 구조:"
          Get-ChildItem -Recurse -Depth 2 | Select-Object FullName
        }
      shell: pwsh
      
    # 빌드 구성에 따라 아티팩트 업로드
    - name: 빌드 결과물 업로드
      id: upload_artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.set_artifact_name.outputs.artifact_name }}
        path: |
          **/bin/Debug/*.exe
          **/bin/Debug/*.dll
          **/bin/Release/*.exe
          **/bin/Release/*.dll
          !**/*.pdb
          !**/*.tmp
        retention-days: 30
        if-no-files-found: warn
        
    - name: Release 생성
      if: steps.set_version.outputs.is_release == 'true'
      uses: softprops/action-gh-release@v1
      with:
        name: WindowLocker ${{ steps.set_version.outputs.version }}
        draft: false
        prerelease: false
        files: |
          **/bin/Release/WindowLocker.exe
          **/bin/Release/*.dll
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 아티팩트 다운로드 작업은 별도 실행하지 않고 필요한 경우에만 활성화
  download-artifacts:
    needs: build
    runs-on: windows-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: 빌드 결과물 다운로드
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.build.outputs.artifact_name }}
        path: downloaded-artifact
        
    - name: 다운로드 확인
      run: |
        echo "아티팩트 이름: ${{ needs.build.outputs.artifact_name }}"
        echo "빌드 버전: ${{ needs.build.outputs.version }}"
        
        if (Test-Path -Path "downloaded-artifact") {
          echo "다운로드된 파일 목록:"
          Get-ChildItem -Path "downloaded-artifact" -Recurse
        } else {
          echo "다운로드된 아티팩트 디렉터리가 없습니다."
        }
      shell: pwsh 