name: WindowLocker CI/CD

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.set_version.outputs.version }}
      is_release: ${{ steps.set_version.outputs.is_release }}
      artifact_name: ${{ steps.set_artifact_name.outputs.artifact_name }}
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v3
      
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.3
      
    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1.2.0

    - name: NuGet 패키지 복원
      run: nuget restore WindowLocker.sln
      
    - name: 빌드 버전 설정
      id: set_version
      run: |
        if ("${{ github.ref_type }}" -eq "tag") {
          $VERSION = "${{ github.ref_name }}".TrimStart("v")
          echo "version=$VERSION" >> $env:GITHUB_OUTPUT
          echo "is_release=true" >> $env:GITHUB_OUTPUT
        } else {
          $TODAY = Get-Date -Format "yyyy.MM.dd"
          $SHORT_SHA = "${{ github.sha }}".Substring(0, 7)
          $VERSION = "$TODAY-$SHORT_SHA"
          echo "version=$VERSION" >> $env:GITHUB_OUTPUT
          echo "is_release=false" >> $env:GITHUB_OUTPUT
        }
      shell: pwsh
      
    - name: 아티팩트 이름 설정
      id: set_artifact_name
      run: |
        if ("${{ steps.set_version.outputs.is_release }}" -eq "true") {
          echo "artifact_name=WindowLocker-${{ steps.set_version.outputs.version }}-Release" >> $env:GITHUB_OUTPUT
        } else {
          echo "artifact_name=WindowLocker-Debug-${{ github.run_number }}" >> $env:GITHUB_OUTPUT
        }
      shell: pwsh
      
    - name: Debug 빌드
      if: github.event_name == 'pull_request' || github.event_name == 'push' && startsWith(github.ref, 'refs/heads/')
      run: msbuild WindowLocker.sln /p:Configuration=Debug /p:Platform="Any CPU" /p:DebugSymbols=true /p:DebugType=full
      
    - name: Release 빌드
      if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')
      run: msbuild WindowLocker.sln /p:Configuration=Release /p:Platform="Any CPU"
      
    - name: 디버그 결과물 디렉터리 확인
      if: github.event_name == 'pull_request' || github.event_name == 'push' && startsWith(github.ref, 'refs/heads/')
      run: |
        echo "빌드 결과물 디렉터리 목록:"
        Get-ChildItem -Path "bin" -Recurse | Select-Object FullName
      shell: pwsh
      
    - name: 릴리즈 결과물 디렉터리 확인
      if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')
      run: |
        echo "빌드 결과물 디렉터리 목록:"
        Get-ChildItem -Path "bin" -Recurse | Select-Object FullName
      shell: pwsh
      
    - name: 빌드 결과물 업로드 - Debug
      if: github.event_name == 'pull_request' || github.event_name == 'push' && startsWith(github.ref, 'refs/heads/')
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.set_artifact_name.outputs.artifact_name }}
        path: |
          bin/Debug/
          !**/*.pdb
          !**/*.tmp
        retention-days: 14
        if-no-files-found: warn
        
    - name: 빌드 결과물 업로드 - Release
      if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.set_artifact_name.outputs.artifact_name }}
        path: |
          bin/Release/
          !**/*.pdb
          !**/*.tmp
        retention-days: 30
        if-no-files-found: warn
        
    - name: Release 생성
      if: steps.set_version.outputs.is_release == 'true'
      uses: softprops/action-gh-release@v1
      with:
        name: WindowLocker ${{ steps.set_version.outputs.version }}
        draft: false
        prerelease: false
        files: |
          bin/Release/WindowLocker.exe
          bin/Release/*.dll
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  download-artifacts:
    needs: build
    runs-on: windows-latest
    if: always() && needs.build.result == 'success'
    
    steps:
    - name: 빌드 결과물 다운로드
      uses: actions/download-artifact@v3
      with:
        name: ${{ needs.build.outputs.artifact_name }}
        path: downloaded-artifact
        
    - name: 다운로드 확인
      run: |
        echo "아티팩트 이름: ${{ needs.build.outputs.artifact_name }}"
        echo "빌드 버전: ${{ needs.build.outputs.version }}"
        echo "다운로드된 파일 목록:"
        Get-ChildItem -Path downloaded-artifact -Recurse
      shell: pwsh 